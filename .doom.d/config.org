#+TITLE: Config
#+STARTUP: content

* Org mode
** Config hook
#+begin_src emacs-lisp
(defun my/org-mode-hook ()
  (setq-local
   company-idle-delay nil
   ;; use visual line numbers for folded org-mode
   display-line-numbers 'visual)
  ;; rebind ZZ and ZQ to save note
  (if (string-equal (buffer-name) "*Org Note*")
      (progn
        (define-key evil-normal-state-local-map (kbd "Z Z")
          #'(lambda ()
              "Close and file note"
              (interactive)
              (funcall org-finish-function)))
        (define-key evil-normal-state-local-map (kbd "Z Q")
          #'(lambda ()
              "Abort storing current note"
              (interactive)
              (let ((org-note-abort t))
                (funcall org-finish-function))))))
  ;; enable auto-revert-mode for inbox.org file only
  (when (string-equal (buffer-name) "inbox.org")
    (auto-revert-mode 1)))
#+end_src
** Time grid override
#+begin_src emacs-lisp
(defun my/time-grid-override (func list ndays todayp)
  "Show time grid items during scheduled blocks with org-scheduled face."
  (let* (
         ;; How frequent in minutes to have time grid intervals. This must match
         ;; the times in org-agenda-time-grid
         (time-grid-interval 30.0)
         (scheduled-times (mapcan #'(lambda (el)
                                      ;; get all scheduled items as pairs of (start time, end time, text)
                                      ;; end time is rounded to nearest time-grid-interval
                                      ;; all times are in minutes since midnight
                                      (if-let ((el-not-null-p el)
                                               (time-num (get-text-property 0 'time-of-day el))
                                               (duration (get-text-property 0 'duration el))
                                               (text (get-text-property 0 'txt el))
                                               (time-in-minutes (+ (* (/ time-num 100) 60) (mod time-num 100)))
                                               (time-end (+ time-in-minutes duration))
                                               (round-up #'(lambda (num)
                                                             "Like round, but always round up from 0.5"
                                                             (if (< (- (abs (- num (round num))) 0.5) 0.000001)
                                                                 (ceiling num)
                                                               (round num))))
                                               (time-end-rounded (* (funcall round-up (/ time-end time-grid-interval)) time-grid-interval)))
                                          (list (list time-in-minutes time-end-rounded text))))
                                  list))
         (additional (mapcan #'(lambda (time)
                                 (let ((time-in-minutes (+ (* (/ time 100) 60) (mod time 100))))
                                   ;; check if this time-grid item is near a scheduled item
                                   (if-let (cur-scheduled (cl-find-if
                                                           #'(lambda (scheduled)
                                                               (let* ((sched-start (nth 0 scheduled))
                                                                      (sched-end (nth 1 scheduled)))
                                                                 ;; only show during scheduled time
                                                                 (and (> time-in-minutes sched-start)
                                                                      (< time-in-minutes sched-end))))
                                                           scheduled-times))
                                       (let* ((rawtimestr (replace-regexp-in-string " " "0" (format "%04s" time)))
                                              (timestr (concat (substring rawtimestr 0 -2) ":" (substring rawtimestr -2)))
                                              ;; show a different char for the last time-grid item for a particular scheduled item
                                              (indicator-char (if-let ((end (nth 1 cur-scheduled))
                                                                       (end-diff (- end time-in-minutes))
                                                                       (diff-in-range (and (>= end-diff 0)
                                                                                           (<= end-diff time-grid-interval))))
                                                                  "┘"
                                                                "│"))
                                              (newel (org-agenda-format-item indicator-char (nth 3 org-agenda-time-grid)
                                                                             nil "" nil timestr)))
                                         (put-text-property 2 (length newel) 'face 'org-scheduled newel)
                                         (list newel)))))
                             ;; needs to be the same text as time grid to get formatted correctly
                             (nth 1 org-agenda-time-grid)))
         (newlist (append additional list)))
    ;; call the original function (org-agenda-add-time-grid-maybe)
    (apply (cons func
                 ;; only use the additional time grid if displaying today
                 (list (if todayp newlist list) ndays todayp)))))
#+end_src
** Config
#+begin_src emacs-lisp
(after! org
  (with-no-warnings
    (custom-declare-face '+org-todo-maybe '((t (:inherit (bold font-lock-comment-face org-todo)))) ""))
  (setq
   org-agenda-files '("inbox.org" "agenda.org")
   org-modules '(org-habit)
   org-priority-default ?C
   org-priority-highest ?A
   org-priority-lowest ?D
   org-priority-faces '((?A . error)
                        (?B . warning)
                        (?C . success)
                        (?D . font-lock-comment-face))
   org-priority-start-cycle-with-default nil
   org-log-into-drawer t
   org-todo-keywords '((sequence "TODO(t)" "LOOP(l)" "NEXT(n)" "IDEA(i)" "MAYBE(m)" "LATER(a)" "|" "DONE(d@)" "KILL(k@)")
                       (sequence "[ ](T)" "|" "[X](D)"))
   org-todo-repeat-to-state "LOOP"
   org-todo-keyword-faces '(("LOOP" . +org-todo-active)
                            ("[?]"  . +org-todo-onhold)
                            ("NEXT" . +org-todo-onhold)
                            ("IDEA" . +org-todo-project)
                            ("MAYBE" . +org-todo-maybe)
                            ("LATER" . +org-todo-maybe)
                            ("KILL" . +org-todo-cancel))
   org-agenda-sorting-strategy '((agenda time-up category-keep habit-up scheduled-up todo-state-up priority-down tag-up)
                                 (todo category-keep todo-state-up priority-down ts-up)
                                 (tags category-keep scheduled-up priority-down todo-state-up)
                                 (search category-keep))
   org-agenda-prefix-format '((agenda . " %i %?-12t% s")
                              (todo . " %i %-8:c")
                              (tags . " %i %-8:c")
                              (search . " %i %-8:c"))
   org-agenda-time-grid '((daily today require-timed remove-match)
                          (1000 1030 1100 1130 1200 1230 1300 1330 1400 1430 1500 1530 1600 1630 1700 1730 1800 1830 1900 1930 2000 2030 2100 2130 2200 2230)
                          " ┄┄┄┄┄ " "")
   org-deadline-warning-days 7
   +org-capture-todo-file "inbox.org"
   org-capture-templates '(("t" "Personal todo" entry
                            (file +org-capture-todo-file)
                            "* TODO %?\n%T\n%i\n%a")
                           ("T" "Immediate todo" entry
                            (file+headline "agenda.org" "General")
                            "* TODO %?\nSCHEDULED: %t\n%i")
                           ("n" "Personal notes" entry
                            (file+headline +org-capture-notes-file "Inbox")
                            "* %u %?\n%i\n%a" :prepend t)
                           ("j" "Journal" entry
                            (file+olp+datetree +org-capture-journal-file)
                            "* %U %?\n%i" :prepend t)
                           ("p" "Templates for projects")
                           ("pt" "Project-local todo" entry
                            (file+headline +org-capture-project-todo-file "Inbox")
                            "* TODO %?\n%i\n%a" :prepend t)
                           ("pn" "Project-local notes" entry
                            (file+headline +org-capture-project-notes-file "Inbox")
                            "* %U %?\n%i\n%a" :prepend t)
                           ("pc" "Project-local changelog" entry
                            (file+headline +org-capture-project-changelog-file "Unreleased")
                            "* %U %?\n%i\n%a" :prepend t)
                           ("o" "Centralized templates for projects")
                           ("ot" "Project todo" entry #'+org-capture-central-project-todo-file "* TODO %?\n %i\n %a" :heading "Tasks" :prepend nil)
                           ("on" "Project notes" entry #'+org-capture-central-project-notes-file "* %U %?\n %i\n %a" :heading "Notes" :prepend t)
                           ("oc" "Project changelog" entry #'+org-capture-central-project-changelog-file "* %U %?\n %i\n %a" :heading "Changelog" :prepend t)))
  (map!
   (:map org-agenda-mode-map
    "c s" #'org-agenda-schedule
    "c d" #'org-agenda-deadline
    "s-s" #'org-save-all-org-buffers
    "s-r" #'org-agenda-redo
    (:leader "f s" #'org-save-all-org-buffers))
   (:map org-capture-mode-map
    :n "Z Z" #'org-capture-finalize
    :n "Z Q" #'org-capture-kill
    "C-c C-c" nil
    "C-c C-k" nil))
  (add-hook 'org-mode-hook #'my/org-mode-hook)
  ;; flash the cursor after an org agenda jump to file
  (advice-add 'org-agenda-switch-to :after #'+nav-flash/blink-cursor)
  (advice-add 'org-agenda-goto :after #'+nav-flash/blink-cursor)
  (advice-add 'org-agenda-add-time-grid-maybe :around #'my/time-grid-override))
#+end_src
* Packages
** Circe
#+begin_src emacs-lisp
(after! circe
  (setq circe-network-options
        '(("OFTC"
           :tls t
           :nick "richyliu2"
           :channels ("#qemu-gsoc"))
          ("Libera Chat"
           :tls t
           :nick "richyliu2"
           :channels ("#emacs" "#emacs-beginners" "#emacs-til")))))
#+end_src
** Centaur tabs
*** Tab grouping function
#+begin_src emacs-lisp
(defun my/projectile-groups ()
  "Group tabs by projectile project."
  (cond
   ;; group org-agenda-mode buffers with org mode
   ((string-equal major-mode "org-agenda-mode")
    (list org-directory))
   ;; use default group ("-") for vterm shells
   ((string-equal major-mode "vterm-mode")
    '("-"))
   ;; use default group ("-") for *star* buffers
   ((string-equal (substring (buffer-name) 0 1) "*")
    '("-"))
   ;; hide certain org buffers
   ((and (stringp (projectile-project-root))
         (string-equal (projectile-project-root) org-directory)
         (or (member (buffer-name) '("inbox.org" "journal.org"))
             (string-match-p "_archive$" (buffer-name))))
    (list (concat org-directory "--hidden")))
   ;; otherwise use projectile root (to separate projects with same name)
   (t
    (list (projectile-project-root)))))
#+end_src
*** Config
#+begin_src emacs-lisp
(after! centaur-tabs
  (setq centaur-tabs-buffer-groups-function #'my/projectile-groups))
(centaur-tabs-mode 1)
#+end_src
** Consult
#+begin_src emacs-lisp
(after! consult
  (advice-add #'consult--jump-1 :after #'(lambda (&rest _)
                                           (when (derived-mode-p 'org-mode)
                                             (org-fold-reveal)))))
#+end_src
** Copilot
#+begin_src emacs-lisp
;; use ctrl-tab to accept copilot completion
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (("M-TAB" . 'copilot-accept-completion)
         ("M-<tab>" . 'copilot-accept-completion)))
(after! copilot
  (setq
   copilot-node-executable "/usr/local/bin/node16"
   ;; to reduce memory use; can increase for debugging
   copilot-log-max 50))
#+end_src
** Elcord
#+begin_src emacs-lisp
(use-package! elcord)
(after! elcord
  (setq
   elcord-editor-icon "emacs_icon"
   elcord-quiet t
   elcord-buffer-details-format-function #'(lambda ()
                                    (let* ((raw-name (buffer-name))
                                           ;; sanitize buffer name to remove project names
                                           (buf-name
                                            (cond
                                             ;; strip project name from doom buffers
                                             ((string-prefix-p "*doom" raw-name) "*doom*")
                                             (t raw-name))))
                                      (format "Editing %s" buf-name))))
  (elcord-mode))
#+end_src
** Evil-org
#+begin_src emacs-lisp
(after! evil-org
  (map!
   (:map evil-org-mode-map
    ;; go to beginning of line (not including bullets) in org
    :m "^" #'org-beginning-of-line
    :n "C-j" #'org-next-visible-heading
    :n "C-k" #'org-previous-visible-heading))
  (remove-hook 'org-tab-first-hook #'+org-cycle-only-current-subtree-h))
#+end_src
** Flycheck
#+begin_src emacs-lisp
(after! flycheck
  ;; add qemu include path for flycheck
  (add-hook 'c-mode-hook
            (lambda () (setq flycheck-clang-include-path
                             (list (expand-file-name "~/code/neojetset-qemu/include")
                                   (expand-file-name "~/code/neojetset-qemu/build")
                                   )))))
#+end_src
** Irony
#+begin_src emacs-lisp
;; override irony-mode to enable only for non-TRAMP files
(defun my/disable-irony-mode-if-remote (oldfun &rest args)
  "Disable irony-mode if the current buffer is on a remote host."
  (unless (and buffer-file-name (file-remote-p buffer-file-name))
    (apply oldfun args)))
(after! irony
  (advice-add #'irony-mode :around #'my/disable-irony-mode-if-remote))
#+end_src
** Latex preview pane
#+begin_src emacs-lisp
(after! latex-preview-pane
  (setq preview-orientation 'down))
#+end_src
** LSP
#+begin_src emacs-lisp
(after! lsp-mode
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-tramp-connection "ccls")
                    :major-modes '(c++-mode)
                    :remote? t))
  (setq lsp-log-io t))
#+end_src
** Vterm
*** Keymap override
#+begin_src emacs-lisp
(defun my/vterm-keymap-override-setup ()
  "Make vterm keymaps more usable."
  ;; vterm map "leader" (to send all ctrl keys)
  (define-key evil-normal-state-local-map (kbd "C-o") vterm-mode-map)
  (define-key evil-insert-state-local-map (kbd "C-o") vterm-mode-map)
  ;; use C-c to send actual C-c
  (define-key evil-normal-state-local-map (kbd "C-c") #'vterm-send-C-c)
  (define-key evil-insert-state-local-map (kbd "C-c") #'vterm-send-C-c)
  ;; copy mode
  (define-key evil-normal-state-local-map (kbd "C-x c") #'vterm-copy-mode)
  (define-key evil-insert-state-local-map (kbd "C-x c") #'vterm-copy-mode)
  ;; toggle send esc
  (define-key evil-normal-state-local-map (kbd "C-x z") #'evil-collection-vterm-toggle-send-escape)
  (define-key evil-insert-state-local-map (kbd "C-x z") #'evil-collection-vterm-toggle-send-escape)
  ;; clear scrollback
  (define-key evil-normal-state-local-map (kbd "C-x l") #'vterm-clear-scrollback)
  (define-key evil-insert-state-local-map (kbd "C-x l") #'vterm-clear-scrollback)
  ;; send ctrl-p/n to vterm directly
  (define-key evil-normal-state-local-map (kbd "C-p") #'vterm-send-C-p)
  (define-key evil-normal-state-local-map (kbd "C-n") #'vterm-send-C-n)
  ;; make move with arrow keys word work correctly
  (define-key evil-insert-state-local-map (kbd "M-<left>") #'vterm-send-M-b)
  (define-key evil-insert-state-local-map (kbd "M-<right>") #'vterm-send-M-f))
#+end_src
*** Config
#+begin_src emacs-lisp
(after! vterm
  ;; fix shells
  (setq vterm-tramp-shells '(("ssh" "/bin/zsh")))
  (setq vterm-environment '("TMUX=none"))
  (setq vterm-kill-buffer-on-exit nil)
  (map!
   (:map vterm-mode-map
    ;; alt-backspace to delete word in vterm insert mode
    :i "M-<backspace>" #'vterm-send-meta-backspace
    ;; originally behind C-c, move them to vterm map
    "C-g" #'vterm-send-C-g
    "C-u" #'vterm-send-C-u
    ;; sent C-l by default, also can send vterm-clear
    "C-l" #'vterm-send-C-l
    "C-c l" #'vterm-clear
    ;; missing in original vterm-mode-map
    "C-x" #'vterm-send-C-x
    "C-y" #'vterm-send-C-y
    ))
  (add-hook 'vterm-mode-hook #'my/vterm-keymap-override-setup))
#+end_src
** Yasnippet
#+begin_src emacs-lisp
(defun my/+snippet--completing-read-uuid (prompt all-snippets &rest args)
    " Fix `+snippets/edit' error caused by vertico stripping text properties when completing.

Overrides `+snippet--completing-read-uuid' to strip text properties.
Copied fix from: https://github.com/doomemacs/doomemacs/issues/4127#issuecomment-1019731798"
    (let* ((snippet-data (cl-loop for (_ . tpl) in (mapcan #'yas--table-templates (if all-snippets
                                                                                      (hash-table-values yas--tables)
                                                                                    (yas--get-snippet-tables)))
                                  for txt = (format "%-25s%-30s%s"
                                                    (yas--template-key tpl)
                                                    (yas--template-name tpl)
                                                    (abbreviate-file-name (yas--template-load-file tpl)))
                                  collect
                                  `(,txt . ,(yas--template-uuid tpl))))
           (selected-value (apply #'completing-read prompt snippet-data args)))
      (alist-get selected-value snippet-data nil nil 'equal)))
(after! yasnippet
  (advice-add '+snippet--completing-read-uuid :override #'my/+snippet--completing-read-uuid))
#+end_src
* Keymaps
#+begin_src emacs-lisp
(defun my/reset-doom ()
  "Kill all buffers in buffer-list and cd back to home"
  (interactive)
  (mapc #'kill-buffer (buffer-list))
  (cd "~/")
  (delete-other-windows)
  ;; delete all workspaces
  (mapc #'+workspace/delete (+workspace-list-names)))

(require 'projectile)
(defun my/default-agenda-view ()
  "Open my personal default agenda view

Note: projectile is still broken, so you need to open the org project manually
with SPC p p first"
  (interactive)
  (delete-other-windows)
  ;; disable popup for file selection in project
  ;; (setq current-prefix-arg t)
  ;; switch to org-directory project first to avoid projectile issues
  ;; (projectile-switch-project-by-name org-directory)
  ;; (find-file (concat org-directory "agenda.org"))
  ;; open up org-agenda and agenda.org side by side
  (evil-window-vsplit)
  (org-agenda-list)
  ;; ugly hack to refresh org-agenda after inline links are rendered
  (sleep-for 0.01)
  (org-agenda-redo))

(defmacro my/goto-tab-n (n)
  `(lambda ()
     "Goto tab N"
     (interactive)
     (+tabs:next-or-goto ,n)))

(map!
 (:when (modulep! :ui tabs)
  ;; use meta-number (alt-number) to jump to tab
  :g "M-1" (my/goto-tab-n 1)
  :g "M-2" (my/goto-tab-n 2)
  :g "M-3" (my/goto-tab-n 3)
  :g "M-4" (my/goto-tab-n 4)
  :g "M-5" (my/goto-tab-n 5)
  :g "M-6" (my/goto-tab-n 6)
  :g "M-7" (my/goto-tab-n 7)
  :g "M-8" (my/goto-tab-n 8)
  :g "M-9" (my/goto-tab-n 9)

  ;; use SPC-number to jump to tab
  (:leader
   :desc "Buffer tab 1" :n "1" (my/goto-tab-n 1)
   :desc "Buffer tab 2" :n "2" (my/goto-tab-n 2)
   :desc "Buffer tab 3" :n "3" (my/goto-tab-n 3)
   :desc "Buffer tab 4" :n "4" (my/goto-tab-n 4)
   :desc "Buffer tab 5" :n "5" (my/goto-tab-n 5)
   :desc "Buffer tab 6" :n "6" (my/goto-tab-n 6)
   :desc "Buffer tab 7" :n "7" (my/goto-tab-n 7)
   :desc "Buffer tab 8" :n "8" (my/goto-tab-n 8)
   :desc "Buffer tab 9" :n "9" (my/goto-tab-n 9)))

 (:when (modulep! :ui workspaces)
  :g "s-1" #'+workspace/switch-to-0
  :g "s-2" #'+workspace/switch-to-1
  :g "s-3" #'+workspace/switch-to-2
  :g "s-4" #'+workspace/switch-to-3
  :g "s-5" #'+workspace/switch-to-4
  :g "s-6" #'+workspace/switch-to-5
  :g "s-7" #'+workspace/switch-to-6
  :g "s-8" #'+workspace/switch-to-7
  :g "s-9" #'+workspace/switch-to-final)


 ;; cmd-shift-[/] to switch workspace
 :g "s-{" #'+workspace/switch-left
 :g "s-}" #'+workspace/switch-right

 ;; cmd-w to kill buffer instead of workspace
 :g "s-w" #'kill-current-buffer
 ;; cmd-d to kill workspace
 :g "s-d" #'+workspace/delete

 ;; same shortcut as in System Preferences -> Keyboard -> Shortcuts -> Services
 :g "C-s-l" (lambda ()
              (interactive)
              (start-process "Start Screen Saver"'
                             nil
                             "/usr/bin/automator"
                             "/Users/richard/Library/Services/Start Screen Saver.workflow"))

 (:mode org-mode
  ;; cmd-k to link in org mode
  :g "s-k" #'org-insert-link)

 (:map LaTeX-mode-map
  :localleader :n "r" #'latex-preview-pane-mode)

 ;; disable evil-lion bindings that conflict with org mode
 :n "gl" nil

 ;; disable aya-expand keymap (conflicts with copilot completion)
 :i "C-<tab>" nil

 (:leader
  :desc "Kill all buffers" "q a" #'my/reset-doom
  :desc "Sync org with remote" "n r" (lambda ()
                                       (interactive)
                                       (call-process (concat org-directory "beorg_sync.sh"))
                                       (message "Synced org with remote"))
  :desc "Agenda split view" "n SPC" #'my/default-agenda-view

  (:when (modulep! :ui nav-flash)
   :desc "Blink current line" "b L" #'+nav-flash/blink-cursor)

  (:when (modulep! :term vterm)
   :desc "Open projectile vterm" "p v" #'projectile-run-vterm
   :desc "Open vterm buffer" "b v" #'vterm)

  (:when (modulep! :tools magit)
   :desc "Stage all" "g a" #'magit-stage-modified)

  :desc "Align" "c a" #'align)

 (:map evil-window-map
  ;; unmap SPC w C-h so it can run help instead
  "C-h" nil)

 (:map minibuffer-local-map
  ;; go to normal mode with C-f (like command line edit mode)
  "C-f" #'evil-normal-state)

 (:map org-mode-map
  :localleader
  :desc "Add note" :n "N" #'org-add-note
  :desc "Preview latex fragment" :n "L" #'org-latex-preview)

 ;; make { and } (paragraph motions) work linewise
 :o "}" #'(lambda ()
            (interactive)
            (evil-visual-line)
            (evil-forward-paragraph)
            (evil-visual-line))
 :o "{" #'(lambda ()
            (interactive)
            (evil-visual-line)
            (evil-backward-paragraph)
            (evil-visual-line)))
#+end_src
* Config
** Frame size
#+begin_src emacs-lisp
(setq initial-frame-alist
      (append initial-frame-alist
              '((width . 158)
                (height . 70))))
#+end_src
** Font
#+begin_src emacs-lisp
(setq doom-font (font-spec
                 :family "iosevka term ss07"
                 :width 'expanded
                 :size 15
                 ))
#+end_src
** Theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-one-light)
#+end_src
** Line numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src
** Org directory
#+begin_src emacs-lisp
(setq org-directory "/Users/richard/Documents/org/")
#+end_src
** General
#+begin_src emacs-lisp
(setq
 delete-by-moving-to-trash nil
 evil-emacs-state-cursor '("red" bar))
#+end_src
** Shift size
#+begin_src emacs-lisp
(defun my/set-shift-2 ()
  (setq evil-shift-width 2))
(add-hook 'html-mode-hook #'my/set-shift-2)
(add-hook 'css-mode-hook #'my/set-shift-2)
(add-hook 'js-mode-hook #'my/set-shift-2)
#+end_src
** Auto fold text
#+begin_src emacs-lisp
;; enable folding in text mode
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src
** Disable menu bar
Get rid of as many menu bar items as possible to reduce clutter. We can't get
rid of the whole thing because of a bug with MacOS that treats windows without a
menu bar as non-application windows (and thus can't be focused) (see [[https://github.com/doomemacs/doomemacs/commit/3583e1f2e0249cddc2d8709238230c181b4bb3ef][doom
patch]]). We clear the entire ~menu-bar~ map, but keep the ~tools~ because
otherwise ispell will complain.
#+begin_src emacs-lisp
(let ((tools-bkup (lookup-key global-map [menu-bar tools])))
  (define-key global-map [menu-bar] nil)
  (define-key global-map [menu-bar tools] tools-bkup))
#+end_src
* Advice
** Custom cache
#+begin_src emacs-lisp
(defvar my/Man-cache nil
  "Cache variable used for `my/Man-completion-always-cache'")
(defun my/Man-completion-always-cache (_string _pred _action)
  "Always cache the `Man-completion-cache' (even across calls) for faster speed on mac."
  (if Man-completion-cache
      (setq my/Man-cache Man-completion-cache)
    (setq Man-completion-cache my/Man-cache)))
(advice-add 'Man-completion-table :before #'my/Man-completion-always-cache)
#+end_src
