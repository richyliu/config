#+TITLE: Config
#+STARTUP: content

* Org mode
** Config hook
- display visual line numbers
- rebind ZZ and ZQ to save note and discard note, respectively
- change word wrap width

#+begin_src emacs-lisp :tangle yes
(defun my/org-mode-hook ()
  (setq-local
   company-idle-delay nil)
  (setq-local fill-column 100)
  ;; rebind ZZ and ZQ to save note
  (if (string-equal (buffer-name) "*Org Note*")
      (progn
        (define-key evil-normal-state-local-map (kbd "Z Z")
          #'(lambda ()
              "Close and file note"
              (interactive)
              (funcall org-finish-function)))
        (define-key evil-normal-state-local-map (kbd "Z Q")
          #'(lambda ()
              "Abort storing current note"
              (interactive)
              (let ((org-note-abort t))
                (funcall org-finish-function))))))
  ;; enable auto-revert-mode for inbox.org file only
  (when (string-equal (buffer-name) "inbox.org")
    (auto-revert-mode 1)))
#+end_src
** Time grid override
#+begin_src emacs-lisp :tangle yes
(defun my/time-grid-override (func list ndays todayp)
  "Show time grid items during scheduled blocks with org-scheduled face."
  (let* (
         ;; How frequent in minutes to have time grid intervals. This must match
         ;; the times in org-agenda-time-grid
         (time-grid-interval 30.0)
         (scheduled-times (mapcan #'(lambda (el)
                                      ;; only consider items with a scheduled time
                                      (if (and el (get-text-property 0 'time-of-day el))
                                          ;; get all scheduled items as pairs of (start time, end time)
                                          ;; end time is rounded to nearest time-grid-interval
                                          ;; all times are in minutes since midnight
                                          (let* ((time-num (get-text-property 0 'time-of-day el))
                                                 (duration (or (get-text-property 0 'duration el) 0))
                                                 (time-in-minutes (+ (* (/ time-num 100) 60) (mod time-num 100)))
                                                 (time-end (+ time-in-minutes duration))
                                                 (round-up #'(lambda (num)
                                                               "Like round, but always round up from 0.5"
                                                               (if (< (- (abs (- num (round num))) 0.5) 0.000001)
                                                                   (ceiling num)
                                                                 (round num))))
                                                 (time-end-rounded (* (funcall round-up (/ time-end time-grid-interval)) time-grid-interval)))
                                            (list (list time-in-minutes time-end-rounded)))))
                                  list))
         (additional (mapcan #'(lambda (time)
                                 (let ((time-in-minutes (+ (* (/ time 100) 60) (mod time 100))))
                                   ;; check if this time-grid item is near a scheduled item
                                   (if-let (cur-scheduled (cl-find-if
                                                           #'(lambda (scheduled)
                                                               (let* ((sched-start (nth 0 scheduled))
                                                                      (sched-end (nth 1 scheduled)))
                                                                 ;; only show during scheduled time
                                                                 (and (> time-in-minutes sched-start)
                                                                      (< time-in-minutes sched-end))))
                                                           scheduled-times))
                                       ;; don't show this time-grid if it's the start of another scheduled item since the
                                       ;; scheduled item itself takes up a line
                                       (unless (cl-some #'(lambda (scheduled)
                                                            (let* ((sched-start (nth 0 scheduled))
                                                                   (sched-end (nth 1 scheduled)))
                                                              (= time-in-minutes sched-start)))
                                                        scheduled-times)
                                         (let* ((rawtimestr (replace-regexp-in-string " " "0" (format "%04s" time)))
                                                (timestr (concat (substring rawtimestr 0 -2) ":" (substring rawtimestr -2)))
                                                ;; show a different char for the last time-grid item for a particular scheduled item
                                                (indicator-char (if-let ((end (nth 1 cur-scheduled))
                                                                         (end-diff (- end time-in-minutes))
                                                                         (diff-in-range (and (>= end-diff 0)
                                                                                             (<= end-diff time-grid-interval))))
                                                                    "┘"
                                                                  "│"))
                                                (newel (org-agenda-format-item indicator-char (nth 3 org-agenda-time-grid)
                                                                               nil "" nil timestr)))
                                           (put-text-property 2 (length newel) 'face 'org-scheduled newel)
                                           (list newel))))))
                             ;; needs to be the same text as time grid to get formatted correctly
                             (nth 1 org-agenda-time-grid)))
         (newlist (append additional list)))
    ;; call the original function (org-agenda-add-time-grid-maybe)
    (apply (cons func (list
                       ;; use the added list if we are using a time grid
                       (if org-agenda-use-time-grid newlist list)
                       ndays todayp)))))
#+end_src
** Config
*** Header
#+begin_src emacs-lisp :tangle yes
(after! org
#+end_src
*** Priority
#+begin_src emacs-lisp :tangle yes
(setq org-priority-default ?B)
(setq org-priority-highest ?A)
(setq org-priority-lowest ?E)
(setq org-priority-faces '((?A . org-level-1)
                           (?B . org-level-2)
                           (?C . org-level-3)
                           (?D . org-level-4)
                           (?E . +org-todo-someday)))
(setq org-priority-start-cycle-with-default nil)
#+end_src
*** Agenda
**** Misc
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-files '("inbox.org" "agenda.org" "agenda_more.org"))
(setq org-agenda-prefix-format '((agenda . " %i %?-12t%-3s%2e ")
                                 (todo . " %i")
                                 (tags . " %i")
                                 (search . " %i")))
(setq org-agenda-time-grid '((daily today remove-match)
                             (900 930 1000 1030 1100 1130 1200 1230 1300 1330 1400 1430 1500 1530 1600 1630 1700 1730 1800 1830 1900 1930 2000 2030 2100 2130 2200 2230)
                             " ┄┄┄┄┄ " ""))
(setq org-agenda-scheduled-leaders '("S:" "!%d"))
(setq org-agenda-deadline-leaders '("D:" "-%d" "%2dd ago: "))
(setq org-deadline-warning-days 7)
(setq org-modules '(org-habit))
(setq org-time-stamp-rounding-minutes '(0 30))
(setq org-habit-show-habits-only-for-today nil)
(setq org-habit-show-done-always-green t)
(setq org-habit-following-days 3)
(setq +org-habit-graph-window-ratio 0.2)
(setq org-extend-today-until 3)
#+end_src
**** Agenda sorting
#+begin_src emacs-lisp :tangle yes
(defun my/org-agenda-custom-sort (a b)
  "Like the `time-up' sorting strategy, but keep timestamps last.

This is very similar to the `time-up' options for `org-agenda-sorting-strategy',
but it always sorts agenda items without a timestamp first (before any items
with a timestamp).

Also sorts items with a deadline after scheduled items and habits (HABT) after
everything else."
  (let ((a-timep (get-text-property 1 'time-of-day a))
        (b-timep (get-text-property 1 'time-of-day b))
        (a-type (get-text-property 1 'type a))
        (b-type (get-text-property 1 'type b))
        (a-todo-state (get-text-property 1 'todo-state a))
        (b-todo-state (get-text-property 1 'todo-state b)))
    (cond
     ((and a-timep b-timep) (org-cmp-time a b))
     (a-timep +1)
     (b-timep -1)
     ((and (string= a-type "upcoming-deadline")
           (not (string= b-type "upcoming-deadline"))) +1)
     ((and (not (string= a-type "upcoming-deadline"))
           (string= b-type "upcoming-deadline")) -1)
     ((and (string= a-todo-state "HABT")
           (not (string= b-todo-state "HABT"))) +1)
     ((and (string= b-todo-state "HABT")
           (not (string= a-todo-state "HABT"))) -1))))
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq org-agenda-sorting-strategy '((agenda user-defined-up deadline-up priority-down scheduled-up todo-state-up effort-up habit-up)
                                    (todo todo-state-up priority-down deadline-up ts-up effort-up)
                                    (tags todo-state-up priority-down deadline-up ts-up effort-up)
                                    (search scheduled-up priority-down todo-state-up effort-up)))
(setq org-agenda-cmp-user-defined #'my/org-agenda-custom-sort)
#+end_src
**** Custom commands
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-custom-commands '(("d" "Daily agenda and TODOs"
                                    ((todo "TODO" ((org-agenda-overriding-header "Inbox TODOs")
                                                   (org-agenda-files '("inbox.org"))))
                                     (todo "PROJ" ((org-agenda-overriding-header "Projects")
                                                   (org-agenda-dim-blocked-tasks nil)))
                                     (agenda "" ((org-agenda-span 2)
                                                 (org-agenda-start-day "0d")
                                                 (org-agenda-dim-blocked-tasks nil)))))
                                   ("g" "Time grid and TODOs for 3 days with effort sums"
                                    ((agenda "" ((org-agenda-span 1)
                                                 (org-agenda-start-day "0d")
                                                 (org-agenda-dim-blocked-tasks nil)))
                                     (agenda "" ((org-agenda-span 1)
                                                 (org-agenda-start-day "+1d")
                                                 (org-agenda-dim-blocked-tasks nil)))
                                     (agenda "" ((org-agenda-span 1)
                                                 (org-agenda-start-day "+2d")
                                                 (org-agenda-dim-blocked-tasks nil)))))
                                   ("D" "Daily TODOs for a week"
                                    ((agenda "" ((org-agenda-overriding-header "Nonhabits")
                                                 (org-agenda-span 7)
                                                 (org-agenda-start-day "0d")
                                                 (org-agenda-dim-blocked-tasks nil)
                                                 (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("HABT")))
                                                 (org-agenda-use-time-grid nil)))))
                                   ("x" "test"
                                    ((agenda "" ((org-agenda-span 1)
                                                 (org-agenda-start-day "0d")
                                                 (org-agenda-use-time-grid nil)))))
                                   ("tp" "Project TODOs"
                                    ((tags-todo "projects+TODO=\"TODO\""
                                                ((org-agenda-overriding-header "Project TODOs")))
                                     (todo "PROJ" ((org-agenda-overriding-header "Projects")
                                                   (org-agenda-dim-blocked-tasks nil)))))
                                   ("te" "Entertainment"
                                    ((tags-todo "entertainment+TODO=\"TODO\""
                                                ((org-agenda-overriding-header "Entertainment TODOs")))))
                                   ("ta" "Fine Arts"
                                    ((tags-todo "arts+TODO=\"TODO\""
                                                ((org-agenda-overriding-header "Fine Arts TODOs")))))
                                   ("w" "Week-long daily agenda"
                                    ((agenda "" ((org-agenda-span 1) (org-agenda-start-day "0d")))
                                     (agenda "" ((org-agenda-span 1) (org-agenda-start-day "+1d")))
                                     (agenda "" ((org-agenda-span 1) (org-agenda-start-day "+2d")))
                                     (agenda "" ((org-agenda-span 1) (org-agenda-start-day "+3d")))
                                     (agenda "" ((org-agenda-span 1) (org-agenda-start-day "+4d")))
                                     (agenda "" ((org-agenda-span 1) (org-agenda-start-day "+5d")))
                                     (agenda "" ((org-agenda-span 1) (org-agenda-start-day "+6d")))
                                     (agenda "" ((org-agenda-span 1) (org-agenda-start-day "+7d")))))))
#+end_src
**** Effort sums
Show a sum of the efforts and scheduled agenda durations for a given day
#+begin_src emacs-lisp :tangle yes
(defun my/add-effort-sum (&rest args)
  (goto-char (point-min))
  (let ((date-header-regexp (rx
                             (one-or-more (not (any " "))) ;; day of week
                             (one-or-more " ")
                             (one-or-more digit) ;; date
                             (one-or-more " ")
                             (one-or-more (not (any " "))) ;; month
                             (one-or-more " ")
                             (= 4 digit) ;; year
                             )))
    (save-excursion
      (while (re-search-forward date-header-regexp nil t)
        (forward-line 1)
        (let ((scheduled-time 0)
              (todo-time 0))
          (save-excursion
            (while (and (< (line-number-at-pos) (count-lines (point-min) (point-max)))
                        (not (string-match date-header-regexp (thing-at-point 'line))))
              (unless (string-suffix-p "deadline" (get-text-property (point) 'type))
                (let* ((effort-minutes (get-text-property (point) 'effort-minutes))
                       (duration (get-text-property (point) 'duration)))
                  (when duration
                    (setq scheduled-time (+ scheduled-time duration)))
                  (when (and effort-minutes (not duration))
                    (setq todo-time (+ todo-time effort-minutes)))))
              (forward-line 1)))
          (insert (format "Todo: %d minutes. Scheduled: %d minutes. Total: %d minutes.\n"
                          todo-time scheduled-time (+ todo-time scheduled-time))))))))

(add-hook 'org-agenda-finalize-hook #'my/add-effort-sum)
#+end_src
**** Archive override
Archive subtrees to a smaller, temporary file and append them to the bigger agenda_archive. This avoids opening the huge archive org file.
#+begin_src emacs-lisp :tangle yes
(defun my/org-archive-subtree (func &rest args)
  "Archive to a temporary buffer, and then append to the archive file without opening it"
  (let ((org-archive-temp-location (make-temp-file "org-archive" nil ".org")))
    ;; Archive to a temporary file
    (let ((org-archive-location (concat org-archive-temp-location "::"))
          (org-archive-file-header-format ""))
      (apply func args))
    ;; Append the contents of the temporary file to the archive file
    (let* ((org-archive-location-file (replace-regexp-in-string "::.*" "" org-archive-location))
           ;; We need to expand the file name, because org-archive-location-file is relative to the current buffer
           (org-archive-location-abs (expand-file-name org-archive-location-file)))
      (with-current-buffer (find-file-noselect org-archive-temp-location)
        (append-to-file (point-min) (point-max) org-archive-location-abs)
        (kill-buffer)))
    (delete-file org-archive-temp-location)))

(advice-add 'org-archive-subtree :around #'my/org-archive-subtree)
#+end_src
*** Capture and archive
#+begin_src emacs-lisp :tangle yes
(setq org-log-into-drawer t)
(setq +org-capture-todo-file "inbox.org")
(setq org-capture-templates '(("T" "Immediate todo" entry
                               (file +org-capture-todo-file)
                               "* TODO %?\n%i")
                              ("S" "Scheduled todo" entry
                               (file+headline "agenda.org" "General")
                               "* SCHD %?\nSCHEDULED: %t\n%i")
                              ("n" "Personal notes" entry
                               (file+headline +org-capture-notes-file "Inbox")
                               "* %u %?\n%i\n%a" :prepend t)
                              ("j" "Journal" entry
                               (file+olp+datetree +org-capture-journal-file)
                               "* %U %?\n%i" :prepend t)
                              ("p" "Templates for projects")
                              ("pt" "Project-local todo" entry
                               (file+headline +org-capture-project-todo-file "Inbox")
                               "* TODO %?\n%i\n%a" :prepend t)
                              ("pn" "Project-local notes" entry
                               (file+headline +org-capture-project-notes-file "Inbox")
                               "* %U %?\n%i\n%a" :prepend t)
                              ("pc" "Project-local changelog" entry
                               (file+headline +org-capture-project-changelog-file "Unreleased")
                               "* %U %?\n%i\n%a" :prepend t)
                              ("o" "Centralized templates for projects")
                              ("ot" "Project todo" entry #'+org-capture-central-project-todo-file "* TODO %?\n %i\n %a" :heading "Tasks" :prepend nil)
                              ("on" "Project notes" entry #'+org-capture-central-project-notes-file "* %U %?\n %i\n %a" :heading "Notes" :prepend t)
                              ("oc" "Project changelog" entry #'+org-capture-central-project-changelog-file "* %U %?\n %i\n %a" :heading "Changelog" :prepend t)))
(setq org-archive-location "agenda_archive.org::")
#+end_src
*** Todo
#+begin_src emacs-lisp :tangle yes
(with-no-warnings
  (custom-declare-face '+org-todo-someday '((t (:inherit (bold font-lock-comment-face org-todo)))) "" ))
(setq org-todo-keywords '((sequence "TODO(t)" "SCHD(s)" "PROJIDEA(r)" "PROJ(p)" "LOOP(l!)" "HABT(h!)" "NEXT(n)" "WAIT(w@/@)" "IDEA(i)" "SOMEDAY(m)" "NOTE(o)" "|" "DONE(d!)" "KILL(k@)")))
(setq org-todo-repeat-to-state t)
(setq org-todo-keyword-faces '(("TODO" . org-todo)
                               ("SCHD" . org-headline-todo)
                               ("LOOP" . +org-todo-active)
                               ("HABT" . org-table)
                               ("PROJIDEA" . org-level-2)
                               ("PROJ" . org-level-1)
                               ("NEXT" . +org-todo-onhold)
                               ("WAIT" . org-level-4)
                               ("IDEA" . +org-todo-project)
                               ("SOMEDAY" . +org-todo-someday)
                               ("KILL" . org-agenda-dimmed-todo-face)
                               ("NOTE" . org-agenda-dimmed-todo-face)))
#+end_src
*** Mappings
#+begin_src emacs-lisp :tangle yes
(map!
 (:map org-agenda-mode-map
  :m "c s" #'org-agenda-schedule
  :m "c d" #'org-agenda-deadline
  :m "s-s" #'org-save-all-org-buffers
  :m "s-r" #'org-agenda-redo
  (:leader "f s" #'org-save-all-org-buffers)))
#+end_src
*** Get function source
General helpers for finding a function's source and modifying it.

#+begin_src emacs-lisp :tangle yes
(defun my/get-function-defun (func)
  (unless (symbolp func)
    (error "Argument must be a symbol"))
  (let* ((func-lib (find-function-library func nil t))
         (filename (replace-regexp-in-string "\.elc$" ".el" (cdr func-lib))))
    (with-temp-buffer (find-file-literally filename)
                      (goto-char (point-min))
                      (search-forward (concat "(defun " (symbol-name func)))
                      (beginning-of-defun)
                      (prog1 (sexp-at-point)
                        (kill-buffer)))))

(defun my/find-by-keys (key-list assoc)
  (if (null key-list)
      assoc
    (my/find-by-keys (cdr key-list)
                  (alist-get (car key-list) assoc nil nil #'equal))))
#+end_src
*** Schedule time delay fix
Fix for showing delayed scheduled items on the day they are scheduled (as opposed to only showing them for today). This is the =-1d= or =--1d= syntax that can be added to a =SCHEDULED= timestamp

#+begin_src emacs-lisp :tangle yes

(defun my/org-agenda-get-scheduled-today (&rest args)
  "Custom fix for `org-agenda-get-scheduled-today'

Note that this generates the fixed function on demand. (Once this is called)"
  (let* ((key-list '(let* org-element-cache-map lambda when catch let* unless when or))
         (original-func (my/get-function-defun 'org-agenda-get-scheduled))
         (modify-part (my/find-by-keys key-list original-func))
         )
    ;; add a fourth clause to the `and' expression:
    ;;   (and (/= current schedule)
    ;;        (/= current today)
    ;;        (/= current repeat))
    (setf (nth 3 modify-part) (append (nth 3 modify-part) '((/= current (+ schedule ddays)))))
    ;; rename the function so it defines a new function
    (setf (nth 1 original-func) 'my/org-agenda-get-scheduled-today)
    ;; evaluates the `defun`
    (eval original-func)
    ;; now actually call the function
    ;; note that in future invocations, the function will be called itself
    ;; instead of this lazy load wrapper
    (apply 'my/org-agenda-get-scheduled-today args)))
#+end_src
*** Log reschedule and deadline with 3 prefix args
Set =org-log-reschedule= and =org-log-redeadline= when invoking reschedule or redeadline with 3 prefix args. Also, use delay cookies with two =--= instead of one.
#+begin_src emacs-lisp :tangle yes
(defun my/org--deadline-or-schedule (arg type time)
  "Custom fix.

Log the reschedule if 3 prefix args (value: 64). Use delay cookies that delays only the first occurence.

This generates the fixed function on demand."
  (let ((original-func (my/get-function-defun 'org--deadline-or-schedule)))
    ;; change " -%dd" to " --%dd"
    (let* ((key-list '(org-fold-core-ignore-modifications let* pcase `(16) save-excursion let if let* replace-match concat format))
           (modify-part (my/find-by-keys key-list original-func)))
      (setf (nth 0 modify-part) " --%dd"))
    ;; wrap the main body with:
    ;;   (let ((org-log-reschedule (if (equal arg '(64)) 'note nil)))
    ;;        ...)
    (let* ((original-func-body (nth 4 original-func))
           (new-func-body `(let ((org-log-reschedule (if (equal arg '(64)) 'note nil))) ,original-func-body))
           ;; rename the function so it redefines this function
           (new-func (list (nth 0 original-func) 'my/org--deadline-or-schedule (nth 2 original-func) (nth 3 original-func) new-func-body)))
      ;; evaluate the `defun'
      (eval new-func))
    ;; now actually call the function
    ;; note that in future invocations, the function will be called itself
    ;; instead of this lazy load wrapper
    (apply 'my/org--deadline-or-schedule (list arg type time))))
#+end_src
*** Hooks and advice
#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook #'my/org-mode-hook)
;; flash the cursor after an org agenda jump to file
(advice-add 'org-agenda-switch-to :after #'+nav-flash/blink-cursor)
(advice-add 'org-agenda-goto :after #'+nav-flash/blink-cursor)
(advice-add 'org-agenda-add-time-grid-maybe :around #'my/time-grid-override)
(advice-add 'org-agenda-get-scheduled :override #'my/org-agenda-get-scheduled-today)
(advice-add 'org--deadline-or-schedule :override #'my/org--deadline-or-schedule)
#+end_src

Enable org-indent for nice word wrappings when using bullets while inside org log buffer.
#+begin_src emacs-lisp :tangle yes
(add-hook 'org-log-buffer-setup-hook #'org-indent-mode)
#+end_src
*** Export engraving
#+begin_src emacs-lisp :tangle yes
(setq org-latex-src-block-backend 'engrave)
#+end_src
*** Footer
#+begin_src emacs-lisp :tangle yes
)
#+end_src
* Packages
** Anaconda
#+begin_src emacs-lisp :tangle yes
(after! anaconda-mode
  (setq anaconda-mode-disable-rpc 'remote))
#+end_src
** Browse at remote
#+begin_src emacs-lisp :tangle yes
(after! browse-at-remote
    (add-to-list #'browse-at-remote-remote-type-regexps
                (list :host "^gitlab\\.engr\\.illinois\\.edu" :type "gitlab")))
#+end_src
** Circe
#+begin_src emacs-lisp :tangle yes
(after! circe
  (setq circe-network-options
        '(("OFTC"
           :tls t
           :nick "richyliu2"
           :channels ("#qemu-gsoc"))
          ("Libera Chat"
           :tls t
           :nick "richyliu2"
           :channels ("#emacs" "#emacs-beginners" "#emacs-til")))))
#+end_src
** Centaur tabs
*** Tab grouping function
#+begin_src emacs-lisp :tangle yes
(defun my/projectile-groups ()
  "Group tabs by projectile project."
  (cond
   ;; group org-agenda-mode buffers with org mode
   ((string-equal major-mode "org-agenda-mode")
    (list org-directory))
   ;; use default group ("-") for vterm shells
   ((string-equal major-mode "vterm-mode")
    '("-"))
   ;; use default group ("-") for *star* buffers
   ((string-equal (substring (buffer-name) 0 1) "*")
    '("-"))
   ;; hide certain org buffers
   ((and (string-equal default-directory org-directory)
         (member (buffer-name) '("journal.org" "agenda_archive.org")))
    (list (concat org-directory "--hidden")))
   ;; otherwise put all buffers in current perspective (workspace) together
   (t
    (if (persp-contain-buffer-p)
        (list "**current**")
      (list "**other**")))))
#+end_src
*** Config
#+begin_src emacs-lisp :tangle yes
(after! centaur-tabs
  (setq centaur-tabs-buffer-groups-function #'my/projectile-groups))
(centaur-tabs-mode 1)
#+end_src
** Consult
#+begin_src emacs-lisp :tangle yes
(after! consult
  (advice-add #'consult--jump-1 :after #'(lambda (&rest _)
                                           (when (derived-mode-p 'org-mode)
                                             (org-fold-reveal)))))
#+end_src
** Copilot
#+begin_src emacs-lisp :tangle yes
;; use ctrl-tab to accept copilot completion
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (("M-TAB" . 'copilot-accept-completion)
         ("M-<tab>" . 'copilot-accept-completion)))
(after! copilot
  (setq
   copilot-node-executable "/usr/local/bin/node16"
   ;; to reduce memory use; can increase for debugging
   copilot-log-max 50)
  (advice-add #'copilot--get-source :around #'my/copilot--get-source))

(defun my/copilot--get-source (orig-fun &rest args)
  "Advice to disable warnings"
  (let ((warning-minimum-level :emergency))
    (apply orig-fun args)))
#+end_src
** Elcord
#+begin_src emacs-lisp :tangle yes
(use-package! elcord)
(after! elcord
  (setq
   elcord-editor-icon "emacs_icon"
   elcord-quiet t
   elcord-buffer-details-format-function #'(lambda ()
                                             (let ((filetype
                                                    (replace-regexp-in-string "-mode" "" (symbol-name major-mode))))
                                             (format "Editing %s" filetype))))
  (elcord-mode))
#+end_src
** Eshell
#+begin_src emacs-lisp :tangle yes
(defun my/eshell-keymap-override-setup ()
  (define-key evil-normal-state-local-map (kbd "C-p") #'eshell-previous-input)
  (define-key evil-insert-state-local-map (kbd "C-p") #'eshell-previous-input)
  (define-key evil-normal-state-local-map (kbd "C-n") #'eshell-next-input)
  (define-key evil-insert-state-local-map (kbd "C-n") #'eshell-next-input)
  (define-key evil-normal-state-local-map (kbd "C-c") #'evil-collection-eshell-interrupt-process)
  (define-key evil-insert-state-local-map (kbd "C-c") #'evil-collection-eshell-interrupt-process)
  (define-key evil-normal-state-local-map (kbd "<return>") #'eshell-send-input))
#+end_src

#+begin_src emacs-lisp :tangle yes
(after! eshell
  (add-hook 'eshell-mode-hook #'my/eshell-keymap-override-setup))
#+end_src
** Evil-org
#+begin_src emacs-lisp :tangle yes
(after! evil-org
  (map!
   (:map evil-org-mode-map
    ;; go to beginning of line (not including bullets) in org
    :m "^" #'org-beginning-of-line
    :n "C-j" #'org-next-visible-heading
    :n "C-k" #'org-previous-visible-heading
    :m "s-<up>" #'org-up-element))
  (remove-hook 'org-tab-first-hook #'+org-cycle-only-current-subtree-h)
  (advice-add #'org-up-element :before #'better-jumper-set-jump))
#+end_src
** Evil-org-agenda
#+begin_src emacs-lisp :tangle yes
(after! evil-org-agenda
  (map!
   (:map evil-org-agenda-mode-map
    :m "H" #'org-agenda-date-earlier-minutes
    :m "L" #'org-agenda-date-later-minutes
    :m "z" nil)))
#+end_src
** Flycheck
#+begin_src emacs-lisp :tangle yes
(defun my/flycheck-disable-over-remote (func buffer)
  "Disable `flycheck--handle-idle-trigger' over TRAMP."
  (let ((file (buffer-file-name buffer)))
    (unless (file-remote-p default-directory)
      (apply func (list buffer)))))
#+end_src

#+begin_src emacs-lisp :tangle yes
(after! flycheck
  ;; add qemu include path for flycheck
  (add-hook 'c-mode-hook
            (lambda () (setq flycheck-clang-include-path
                             (list (expand-file-name "~/code/neojetset-qemu/include")
                                   (expand-file-name "~/code/neojetset-qemu/build")
                                   ))))
  (advice-add #'flycheck--handle-idle-trigger :around #'my/flycheck-disable-over-remote))
#+end_src
** Forge core
For detecting git forges (github, gitlab, etc)
#+begin_src emacs-lisp :tangle yes
(after! forge-core
  (add-to-list #'forge-alist
               (list "gitlab.engr.illinois.edu" "gitlab.engr.illinois.edu/api/v4" "gitlab.engr.illinois.edu" 'forge-gitlab-repository)))
#+end_src
** Good scroll
#+begin_src emacs-lisp :tangle yes
(use-package! good-scroll
  :config
  (good-scroll-mode 1))
#+end_src
** Irony
#+begin_src emacs-lisp :tangle yes
;; override irony-mode to enable only for non-TRAMP files
(defun my/disable-irony-mode-if-remote (oldfun &rest args)
  "Disable irony-mode if the current buffer is on a remote host."
  (unless (and buffer-file-name (file-remote-p buffer-file-name))
    (apply oldfun args)))
(after! irony
  (advice-add #'irony-mode :around #'my/disable-irony-mode-if-remote))
#+end_src
** Latex preview pane
#+begin_src emacs-lisp :tangle yes
(after! latex-preview-pane
  (setq preview-orientation 'down))
#+end_src
** LSP
#+begin_src emacs-lisp :tangle yes
(after! lsp-mode
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-tramp-connection "ccls")
                    :major-modes '(c++-mode)
                    :remote? t))
  (setq lsp-log-io t))
#+end_src
** Projectile
Set ~projectile-generic-command~ to a fixed string to allow it to work when
editing projects over TRAMP.

#+begin_src emacs-lisp :tangle yes
(after! projectile
  (setq projectile-sort-order 'recentf)
  (setq projectile-generic-command "find . -type f | cut -c3- | tr '\\n' '\\0'"))
#+end_src
** Rustic
#+begin_src emacs-lisp :tangle yes
(after! rustic-cargo
  (setq rustic-cargo-check-arguments ""))
#+end_src
** Vterm
*** Keymap override
#+begin_src emacs-lisp :tangle yes
(defun my/vterm-keymap-override-setup ()
  "Make vterm keymaps more usable."
  ;; vterm map "leader" (to send all ctrl keys)
  (define-key evil-normal-state-local-map (kbd "C-o") vterm-mode-map)
  (define-key evil-insert-state-local-map (kbd "C-o") vterm-mode-map)
  ;; use C-c to send actual C-c
  (define-key evil-normal-state-local-map (kbd "C-c") #'(lambda () (interactive) (vterm-send "C-C")))
  (define-key evil-insert-state-local-map (kbd "C-c") #'(lambda () (interactive) (vterm-send "C-C")))
  ;; copy mode
  (define-key evil-normal-state-local-map (kbd "C-x c") #'vterm-copy-mode)
  (define-key evil-insert-state-local-map (kbd "C-x c") #'vterm-copy-mode)
  ;; toggle send esc
  (define-key evil-normal-state-local-map (kbd "C-x z") #'evil-collection-vterm-toggle-send-escape)
  (define-key evil-insert-state-local-map (kbd "C-x z") #'evil-collection-vterm-toggle-send-escape)
  ;; clear scrollback
  (define-key evil-normal-state-local-map (kbd "C-x l") #'vterm-clear-scrollback)
  (define-key evil-insert-state-local-map (kbd "C-x l") #'vterm-clear-scrollback)
  ;; send ctrl-p/n to vterm directly
  (define-key evil-normal-state-local-map (kbd "C-p") #'(lambda () (interactive) (vterm-send "C-p")))
  (define-key evil-normal-state-local-map (kbd "C-n") #'(lambda () (interactive) (vterm-send "C-n")))
  ;; make delete send vterm delete
  (define-key evil-insert-state-local-map (kbd "<deletechar>") #'(lambda () (interactive) (vterm-send "<delete>")))
  ;; make move with arrow keys word work correctly
  (define-key evil-insert-state-local-map (kbd "M-<left>") #'(lambda () (interactive) (vterm-send "M-b")))
  (define-key evil-insert-state-local-map (kbd "M-<right>") #'(lambda () (interactive) (vterm-send "M-f"))))
#+end_src
*** Config
#+begin_src emacs-lisp :tangle yes
(after! vterm
  ;; fix shells
  (setq vterm-tramp-shells '(("ssh" "/bin/zsh")))
  (setq vterm-environment '("TMUX=none"))
  (setq vterm-kill-buffer-on-exit nil)
  (map!
   (:map vterm-mode-map
    ;; alt-backspace to delete word in vterm insert mode
    :i "M-<backspace>" #'(lambda () (interactive) (vterm-send "M-<backspace>"))
    ;; originally behind C-c, move them to vterm map
    "C-g" #'(lambda () (interactive) (vterm-send "C-g"))
    "C-u" #'(lambda () (interactive) (vterm-send "C-u"))
    ;; sent C-l by default, also can send vterm-clear
    "C-l" #'(lambda () (interactive) (vterm-send "C-l"))
    "C-c l" #'vterm-clear
    ;; missing in original vterm-mode-map
    "C-x" #'(lambda () (interactive) (vterm-send "C-x"))
    "C-y" #'(lambda () (interactive) (vterm-send "C-y"))
    ))
  (add-hook 'vterm-mode-hook #'my/vterm-keymap-override-setup))
#+end_src
** Woman
#+begin_src emacs-lisp :tangle yes
(after! woman
  ;; The woman-manpath default value does not necessarily match man. If we have
  ;; man available but aren't using it for performance reasons, we can extract
  ;; it's manpath.
  (when (executable-find "gman")
    (setq woman-manpath
          (split-string (cdr (doom-call-process "gman" "--path"))
                        path-separator t))))
#+end_src
** Yasnippet
#+begin_src emacs-lisp :tangle yes
(defun my/+snippet--completing-read-uuid (prompt all-snippets &rest args)
    " Fix `+snippets/edit' error caused by vertico stripping text properties when completing.

Overrides `+snippet--completing-read-uuid' to strip text properties.
Copied fix from: https://github.com/doomemacs/doomemacs/issues/4127#issuecomment-1019731798"
    (let* ((snippet-data (cl-loop for (_ . tpl) in (mapcan #'yas--table-templates (if all-snippets
                                                                                      (hash-table-values yas--tables)
                                                                                    (yas--get-snippet-tables)))
                                  for txt = (format "%-25s%-30s%s"
                                                    (yas--template-key tpl)
                                                    (yas--template-name tpl)
                                                    (abbreviate-file-name (yas--template-load-file tpl)))
                                  collect
                                  `(,txt . ,(yas--template-uuid tpl))))
           (selected-value (apply #'completing-read prompt snippet-data args)))
      (alist-get selected-value snippet-data nil nil 'equal)))
(after! yasnippet
  (advice-add '+snippet--completing-read-uuid :override #'my/+snippet--completing-read-uuid))
#+end_src
* Keymaps
** Commands
*** Kill all buffers and reset doom
Function
#+begin_src emacs-lisp :tangle yes
(defun my/reset-doom ()
  "Kill all buffers in buffer-list and cd back to home"
  (interactive)
  (mapc #'kill-buffer (buffer-list))
  (cd "~/")
  (delete-other-windows)
  ;; delete all workspaces
  (mapc #'+workspace/delete (+workspace-list-names)))
#+end_src

Mapping
#+begin_src emacs-lisp :tangle yes
(map! (:leader
       :desc "Kill all buffers" "q a" #'my/reset-doom))
#+end_src
*** Personal agenda view
Function
#+begin_src emacs-lisp :tangle yes
(require 'projectile)
(defun my/default-agenda-view ()
  "Open my personal split screen agenda view"
  (interactive)
  (delete-other-windows)
  ;; disable popup for file selection in project
  (setq current-prefix-arg t)
  ;; switch to org-directory project first to avoid projectile issues
  (projectile-switch-project-by-name org-directory)
  (find-file (concat org-directory "agenda.org"))
  (find-file (concat org-directory "inbox.org"))
  ;; open up org-agenda and agenda.org side by side
  (evil-window-vsplit)
  (org-agenda nil "d")
  ;; ugly hack to refresh org-agenda after inline links are rendered
  (sleep-for 0.01)
  (org-agenda-redo))
#+end_src

Mapping
#+begin_src emacs-lisp :tangle yes
(map! (:leader
       :desc "Agenda split view" "n SPC" #'my/default-agenda-view))
#+end_src
*** Run current file
Function
#+begin_src emacs-lisp :tangle yes
(defun my/run-current-file ()
  "Runs the file in the current buffer"
  (interactive)
  (compile (buffer-file-name)))
#+end_src

Mapping
#+begin_src emacs-lisp :tangle yes
(map! (:leader
       :desc "Run this file" "f ." #'my/run-current-file))
#+end_src
*** Sync org with remote
Function
#+begin_src emacs-lisp :tangle yes
(defun my/sync-org-with-remote ()
  "Sync personal org files with the cloud"
  (interactive)
  (call-process (concat org-directory "../scripts/beorg_sync.sh"))
  (message "Synced org with remote"))
#+end_src

Mapping
#+begin_src emacs-lisp :tangle yes
(map! (:leader
       :desc "Sync org with remote" "n r" #'my/sync-org-with-remote))
#+end_src
** Tabs
Helper macro
#+begin_src emacs-lisp :tangle yes
(defmacro my/goto-tab-n (n)
  `(lambda ()
     "Goto tab N"
     (interactive)
     (+tabs:next-or-goto ,n)))
#+end_src

Mappings
#+begin_src emacs-lisp :tangle yes
(map!
 (:when (modulep! :ui tabs)
  ;; use meta-number (alt-number) to jump to tab
  :g "M-1" (my/goto-tab-n 1)
  :g "M-2" (my/goto-tab-n 2)
  :g "M-3" (my/goto-tab-n 3)
  :g "M-4" (my/goto-tab-n 4)
  :g "M-5" (my/goto-tab-n 5)
  :g "M-6" (my/goto-tab-n 6)
  :g "M-7" (my/goto-tab-n 7)
  :g "M-8" (my/goto-tab-n 8)
  :g "M-9" (my/goto-tab-n 9)

  ;; use SPC-number to jump to tab
  (:leader
   :desc "Buffer tab 1" :n "1" (my/goto-tab-n 1)
   :desc "Buffer tab 2" :n "2" (my/goto-tab-n 2)
   :desc "Buffer tab 3" :n "3" (my/goto-tab-n 3)
   :desc "Buffer tab 4" :n "4" (my/goto-tab-n 4)
   :desc "Buffer tab 5" :n "5" (my/goto-tab-n 5)
   :desc "Buffer tab 6" :n "6" (my/goto-tab-n 6)
   :desc "Buffer tab 7" :n "7" (my/goto-tab-n 7)
   :desc "Buffer tab 8" :n "8" (my/goto-tab-n 8)
   :desc "Buffer tab 9" :n "9" (my/goto-tab-n 9))))
#+end_src
** Workspaces
#+begin_src emacs-lisp :tangle yes
(map! (:when (modulep! :ui workspaces)
        :g "s-1" #'+workspace/switch-to-0
        :g "s-2" #'+workspace/switch-to-1
        :g "s-3" #'+workspace/switch-to-2
        :g "s-4" #'+workspace/switch-to-3
        :g "s-5" #'+workspace/switch-to-4
        :g "s-6" #'+workspace/switch-to-5
        :g "s-7" #'+workspace/switch-to-6
        :g "s-8" #'+workspace/switch-to-7
        :g "s-9" #'+workspace/switch-to-final

        ;; cmd-shift-[ and cmd-shift-] to switch workspace
        :g "s-{" #'+workspace/switch-left
        :g "s-}" #'+workspace/switch-right

        ;; cmd-w to kill buffer instead of workspace
        :g "s-w" #'kill-current-buffer
        ;; cmd-d to kill workspace
        :g "s-d" #'+workspace/delete))
#+end_src
** Latex mode
#+begin_src emacs-lisp :tangle yes
(map! (:map LaTeX-mode-map
       :localleader :n "r" #'latex-preview-pane-mode))
#+end_src
** Nav flash
#+begin_src emacs-lisp :tangle yes
(map! (:when (modulep! :ui nav-flash)
        :leader
        :desc "Blink current line" "b L" #'+nav-flash/blink-cursor))
#+end_src
** Magit
#+begin_src emacs-lisp :tangle yes
(map! (:when (modulep! :tools magit)
        :leader
        :desc "Stage all" "g a" #'magit-stage-modified))
#+end_src
** Emacs
*** Minibuffer
Go to normal mode with =C-f= (like command line edit mode in Vim)
#+begin_src emacs-lisp :tangle yes
(map! (:map minibuffer-local-map
            "C-f" #'evil-normal-state))
#+end_src
*** Align
#+begin_src emacs-lisp :tangle yes
(map! (:leader
       :desc "Align" "c a" #'align))
#+end_src
** Org-mode
*** General
#+begin_src emacs-lisp :tangle yes
(map! (:map org-mode-map
       :localleader
       :desc "Add note" :n "N" #'org-add-note
       :desc "Reveal fold" :n "s R" #'org-fold-reveal)
      (:mode org-mode
       ;; cmd-k to link in org mode
       :g "s-k" #'org-insert-link))
#+end_src
*** Latex
#+begin_src emacs-lisp :tangle yes
(map! (:map org-mode-map
       :localleader
       :desc "Preview latex fragment" :n "L" #'org-latex-preview))
#+end_src
*** Duplicate subtree by one day
#+begin_src emacs-lisp :tangle yes
(defun my/duplicate-by-one-day (N)
  "Duplicates the subtree N times and increments by one day"
  (interactive "p")
  (org-clone-subtree-with-time-shift N "+1d"))

(map! (:map org-mode-map
       :localleader
       :desc "Duplicate by one day" :n "s C" #'my/duplicate-by-one-day))
#+end_src
** Evil
*** Linewise paragraph motions
Make ={= and =}= (paragraph motions) work linewise
#+begin_src emacs-lisp :tangle yes
(map! :o "}" #'(lambda ()
                 (interactive)
                 (evil-visual-line)
                 (evil-forward-paragraph)
                 (evil-visual-line))
      :o "{" #'(lambda ()
                 (interactive)
                 (evil-visual-line)
                 (evil-backward-paragraph)
                 (evil-visual-line)))
#+end_src
*** Unmap =SPC w C-h= to run help
Unmap =SPC w C-h= so it can run help instead
#+begin_src emacs-lisp :tangle yes
(map! (:map evil-window-map
            "C-h" nil))
#+end_src
*** Disable evil-lion conflicts
** Disable conflicts
#+begin_src emacs-lisp :tangle yes
(map!
 ;; disable evil-lion bindings that conflict with org mode
 :n "gl" nil
 ;; disable aya-expand keymap (conflicts with copilot completion)
 :i "C-<tab>" nil)
#+end_src
** Show screensaver
Same shortcut as in System Preferences -> Keyboard -> Shortcuts -> Services
#+begin_src emacs-lisp :tangle yes
(defun +my/start-screen-saver ()
  "Start screen saver by calling the automator workflow"
  (interactive)
  (start-process "Start Screen Saver"'
                 nil
                 "/usr/bin/automator"
                 "/Users/richard/Library/Services/Start Screen Saver.workflow"))

(map!
 :g "C-s-l" #'+my/start-screen-saver)
#+end_src
** Paste with indent (=]p=)
From [[https://github.com/emacs-evil/evil/issues/464#issuecomment-273753628][here]]
#+begin_src emacs-lisp :tangle yes
(evil-define-command evil-paste-after-and-indent
  (count &optional register yank-handler reindent)
  "Paste and indent the latest yanked text behind point.
If REINDENT is non-nil the pasted lines are completely
reindented, otherwise they are indentent to the current line's
indentation.  The return value is the yanked text."
  :suppress-operator t
  (interactive "*P<x>")
  (let ((curind (unless reindent (current-indentation))))
    (evil-with-single-undo
      (prog1 (evil-paste-after count register yank-handler)
        (indent-region (line-beginning-position) (mark t) curind)
        (setcar evil-last-paste #'evil-paste-after-and-indent)))))

(evil-define-command evil-paste-before-and-indent
  (count &optional register yank-handler reindent)
  "Paste and indent the latest yanked text before point.
If REINDENT is non-nil the pasted lines are completely
reindented, otherwise they are indentent to the current line's
indentation.  The return value is the yanked text."
  :suppress-operator t
  (interactive "*P<x>")
  (let ((curind (unless reindent (current-indentation))))
    (evil-with-single-undo
      (prog1 (evil-paste-before count register yank-handler)
        (indent-region (line-beginning-position) (mark t) curind)
        (setcar evil-last-paste #'evil-paste-before-and-indent)))))

(define-key evil-normal-state-map "]p" #'evil-paste-after-and-indent)
(define-key evil-normal-state-map "[p" #'evil-paste-after-and-indent)
(define-key evil-normal-state-map "]P" #'evil-paste-before-and-indent)
(define-key evil-normal-state-map "[P" #'evil-paste-before-and-indent)
#+end_src
* Config
** Frame size
#+begin_src emacs-lisp :tangle yes
(setq initial-frame-alist
      (append initial-frame-alist
              '((width . 158)
                (height . 70))))
#+end_src
** Font
#+begin_src emacs-lisp :tangle yes
(setq doom-font (font-spec
                 :family "iosevka term ss07"
                 :width 'expanded
                 :size 15
                 ))
#+end_src

Increase font size for default variable pitch. Used for epub, eww (web browser),
etc.
#+begin_src emacs-lisp :tangle yes
(set-face-attribute #'variable-pitch nil :height 170)
#+end_src
** Theme
Set different theme based on light or dark mode
#+begin_src emacs-lisp :tangle yes
(if (equal "Dark\n"
           (shell-command-to-string "defaults read -g AppleInterfaceStyle"))
    (setq doom-theme 'doom-one)
  (setq doom-theme 'doom-one-light))
#+end_src
** Line numbers
#+begin_src emacs-lisp :tangle yes
(setq display-line-numbers-type 'relative)
#+end_src
** Org directory
#+begin_src emacs-lisp :tangle yes
(setq org-directory "/Users/richard/Documents/org/agenda/")
#+end_src
** General
#+begin_src emacs-lisp :tangle yes
(setq
 delete-by-moving-to-trash nil
 evil-emacs-state-cursor '("red" bar))
#+end_src
** Shift size
#+begin_src emacs-lisp :tangle yes
(defun my/set-shift-2 ()
  (setq evil-shift-width 2))
(add-hook 'html-mode-hook #'my/set-shift-2)
(add-hook 'css-mode-hook #'my/set-shift-2)
(add-hook 'js-mode-hook #'my/set-shift-2)
(add-hook 'web-mode-hook #'my/set-shift-2)
#+end_src
** Disable menu bar
Get rid of as many menu bar items as possible to reduce clutter. We can't get
rid of the whole thing because of a bug with MacOS that treats windows without a
menu bar as non-application windows (and thus can't be focused) (see [[https://github.com/doomemacs/doomemacs/commit/3583e1f2e0249cddc2d8709238230c181b4bb3ef][doom
patch]]). We clear the entire ~menu-bar~ map, but keep the ~tools~ because
otherwise ispell will complain.
#+begin_src emacs-lisp :tangle yes
(let ((tools-bkup (lookup-key global-map [menu-bar tools])))
  (define-key global-map [menu-bar] nil)
  (define-key global-map [menu-bar tools] tools-bkup))
#+end_src
** Disable hl-line mode
Copied from [[https://github.com/doomemacs/doomemacs/issues/4206#issuecomment-734414502][here]]
#+begin_src emacs-lisp :tangle yes
(remove-hook 'doom-first-buffer-hook #'global-hl-line-mode)
#+end_src
** Load python eagerly
Load python at startup to prevent issues with loading it on a buffer over TRAMP,
which is slow.
#+begin_src emacs-lisp :tangle yes
(require 'python)
#+end_src
** Latex
Disable smaller subscripts and superscripts in latex. Courtesy of Anakin.
#+begin_src emacs-lisp :tangle yes
(setq tex-fontify-script nil)
(setq font-latex-fontify-script nil)
#+end_src
** Word wrap
#+begin_src emacs-lisp :tangle yes
(setq +word-wrap-fill-style 'auto)
#+end_src
** Assembly comment char
#+begin_src emacs-lisp :tangle yes
;; use pound sign for comments
(setq asm-comment-char ?\#)
#+end_src
** Modeline
#+begin_src emacs-lisp :tangle yes
(setq doom-modeline-enable-word-count t)
#+end_src
** Smooth scroll
#+begin_src emacs-lisp :tangle yes
(setq mac-mouse-wheel-smooth-scroll t)
#+end_src
* Advice
** Custom man cache
#+begin_src emacs-lisp :tangle yes
(defvar my/Man-cache nil
  "Cache variable used for `my/Man-completion-always-cache'")
(defun my/Man-completion-always-cache (_string _pred _action)
  "Always cache the `Man-completion-cache' (even across calls) for faster speed on mac."
  (if Man-completion-cache
      (setq my/Man-cache Man-completion-cache)
    (setq Man-completion-cache my/Man-cache)))
(advice-add 'Man-completion-table :before #'my/Man-completion-always-cache)
#+end_src

Always use man, now that is fixed
#+begin_src emacs-lisp :tangle yes
(advice-add '+default/man-or-woman :override #'man)
#+end_src
** Disable pipenv over remote
Reducing startup time for editing python files over remote. Prevents pipenv from
looking for =Pipfile= files.
#+begin_src emacs-lisp :tangle yes
(advice-add #'pipenv-project-p
            :before-while
            (lambda () (not (file-remote-p default-directory))))
#+end_src
** Projectile dirconfig cache
#+begin_src emacs-lisp :tangle yes
(defvar my/projectile-dirconfig-cache (make-hash-table :test 'equal)
  "Hash table cache used for `my/projectile-parse-dirconfig-file'")

(defun my/projectile-parse-dirconfig-file (orig-fun)
  "Cache the 'projectile-parse-dirconfig-file' function.
When the 'projectile-dirconfig-file' is the same, return the cached dirconfig if
available. This is done to improve speed by reducing reads to the dirconfig,
especially when editing over TRAMP."
  (if-let* ((dirconfig-file (projectile-dirconfig-file))
            (dirconfig-cache (gethash dirconfig-file my/projectile-dirconfig-cache)))
      dirconfig-cache
    (let ((dirconfig (funcall orig-fun)))
      (puthash dirconfig-file dirconfig my/projectile-dirconfig-cache)
      dirconfig)))

(advice-add #'projectile-parse-dirconfig-file :around #'my/projectile-parse-dirconfig-file)
#+end_src
** Images type override for svgs
Override image.el function ~image-type-available-p~ to not accept SVGs (which
are not supported on Mac)
#+begin_src emacs-lisp :tangle yes
(defun my/image-type-available-p (orig-fun type)
  "Override for `image-type-available-p'. Returns nil for type svg"
  (if (eq 'svg type)
      nil
    (funcall orig-fun type)))

(advice-add #'image-type-available-p :around #'my/image-type-available-p)
#+end_src
** Fix exit in org-src edit buffers
Typing =Z Z= in org-src edit buffers cause a =user-error: Please specify a file
name for the buffer= error, since [[https://github.com/hlissner/evil-org-mode/commit/e57a0f143251913b425160294a38e5fb0cbbb5f3][evil-org-mode]] calls ~evil-write~ before saving
instead of ~save-buffer~. This advice overrides ~evil-org-edit-src-exit~ to save
the buffer with ~save-buffer~.
#+begin_src emacs-lisp :tangle yes
(defun my/evil-org-edit-src-exit ()
  "Override for `evil-org-edit-src-exit' to fix no file name error."
  (interactive)
  (call-interactively #'save-buffer)
  (call-interactively #'org-edit-src-exit))
(advice-add #'evil-org-edit-src-exit :override #'my/evil-org-edit-src-exit)
#+end_src
* Local variables
# local variables:
# fill-column: 120
# display-line-numbers: visual
# End:
