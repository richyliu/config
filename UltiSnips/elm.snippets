snippet modelcmd "( { model }, Cmd.none )" b
( { model | $1 }, ${2:Cmd.none} )
endsnippet

snippet Cmd.none "Cmd.none" w
Cmd.none
endsnippet

snippet type "type definition" bA
type ${1:TypeName}
    = $0
endsnippet

snippet view "view function" b
view$1 : Model -> Html Msg
view$1 model =
    $0
endsnippet

snippet update "update function" bA
update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        ${1:NoOp} ->
            ( ${0:model}, Cmd.none )
endsnippet

snippet subscriptions "sub function" bA
subscriptions : Model -> Sub Msg
subscriptions model =
    $0
endsnippet

snippet elem "html element" w
${1:div} [$2] [$0]
endsnippet

snippet case "case of" bA
case ${1:model} of
    ${2:FirstThing} ->
        $0
endsnippet

snippet : "function with type signature" bA
${1:functionName} : ${2:Input} -> ${3:Output}
$1 ${4:param} =
    $0
endsnippet

snippet {-| "comment" bA
{-| $0
-
endsnippet

snippet import "import exposing" bA
import ${1:Html} exposing (${2:$1})$0
endsnippet

snippet log "Debug.log" w
Debug.log "${0:Logged}" 
endsnippet

snippet module "module declaration" bA
module ${1:Main} exposing (..)
$0
endsnippet

snippet -> "case of branch" bA
${1:Constructor} ->
    ( { model | $0 }, Cmd.none)
endsnippet
